// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: adminUser.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createAdminUser = `-- name: CreateAdminUser :execresult
INSERT INTO adminUsers (id,
                        userName,
                        email,
                        passwordHash,
                        status,
                        created,
                        updated)
VALUES (?,
        ?,
        ?,
        ?,
        ?,
        now(),
        now())
`

type CreateAdminUserParams struct {
	ID           string
	Username     string
	Email        string
	Passwordhash string
	Status       NullAdminusersStatus
}

func (q *Queries) CreateAdminUser(ctx context.Context, arg CreateAdminUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAdminUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.Passwordhash,
		arg.Status,
	)
}

const findAdminUserById = `-- name: FindAdminUserById :one
SELECT id, username, email, passwordhash, status, updatedat, createdat
FROM adminUsers
WHERE id = ? LIMIT 1
`

func (q *Queries) FindAdminUserById(ctx context.Context, id string) (*Adminuser, error) {
	row := q.db.QueryRowContext(ctx, findAdminUserById, id)
	var i Adminuser
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Passwordhash,
		&i.Status,
		&i.Updatedat,
		&i.Createdat,
	)
	return &i, err
}

const updateAdminUser = `-- name: UpdateAdminUser :exec
UPDATE adminUsers
SET userName     = ?,
    email        = ?,
    passwordHash = ?,
    status       = ?
WHERE id = ?
`

type UpdateAdminUserParams struct {
	Username     string
	Email        string
	Passwordhash string
	Status       NullAdminusersStatus
	ID           string
}

func (q *Queries) UpdateAdminUser(ctx context.Context, arg UpdateAdminUserParams) error {
	_, err := q.db.ExecContext(ctx, updateAdminUser,
		arg.Username,
		arg.Email,
		arg.Passwordhash,
		arg.Status,
		arg.ID,
	)
	return err
}
