// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: role/v1/role.proto

package rolev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/linzhengen/mii-go/protobuf/go/role/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// RoleServiceName is the fully-qualified name of the RoleService service.
	RoleServiceName = "com.github.linzhengen.role.v1.RoleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RoleServiceGetRoleProcedure is the fully-qualified name of the RoleService's GetRole RPC.
	RoleServiceGetRoleProcedure = "/com.github.linzhengen.role.v1.RoleService/GetRole"
	// RoleServiceListRoleProcedure is the fully-qualified name of the RoleService's ListRole RPC.
	RoleServiceListRoleProcedure = "/com.github.linzhengen.role.v1.RoleService/ListRole"
	// RoleServiceCreateRoleProcedure is the fully-qualified name of the RoleService's CreateRole RPC.
	RoleServiceCreateRoleProcedure = "/com.github.linzhengen.role.v1.RoleService/CreateRole"
	// RoleServiceUpdateRoleProcedure is the fully-qualified name of the RoleService's UpdateRole RPC.
	RoleServiceUpdateRoleProcedure = "/com.github.linzhengen.role.v1.RoleService/UpdateRole"
)

// RoleServiceClient is a client for the com.github.linzhengen.role.v1.RoleService service.
type RoleServiceClient interface {
	GetRole(context.Context, *connect_go.Request[v1.GetRoleRequest]) (*connect_go.Response[v1.GetRoleResponse], error)
	ListRole(context.Context, *connect_go.Request[v1.ListRoleRequest]) (*connect_go.Response[v1.ListRoleResponse], error)
	CreateRole(context.Context, *connect_go.Request[v1.CreateRoleRequest]) (*connect_go.Response[v1.CreateRoleResponse], error)
	UpdateRole(context.Context, *connect_go.Request[v1.UpdateRoleRequest]) (*connect_go.Response[v1.UpdateRoleResponse], error)
}

// NewRoleServiceClient constructs a client for the com.github.linzhengen.role.v1.RoleService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRoleServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) RoleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &roleServiceClient{
		getRole: connect_go.NewClient[v1.GetRoleRequest, v1.GetRoleResponse](
			httpClient,
			baseURL+RoleServiceGetRoleProcedure,
			opts...,
		),
		listRole: connect_go.NewClient[v1.ListRoleRequest, v1.ListRoleResponse](
			httpClient,
			baseURL+RoleServiceListRoleProcedure,
			opts...,
		),
		createRole: connect_go.NewClient[v1.CreateRoleRequest, v1.CreateRoleResponse](
			httpClient,
			baseURL+RoleServiceCreateRoleProcedure,
			opts...,
		),
		updateRole: connect_go.NewClient[v1.UpdateRoleRequest, v1.UpdateRoleResponse](
			httpClient,
			baseURL+RoleServiceUpdateRoleProcedure,
			opts...,
		),
	}
}

// roleServiceClient implements RoleServiceClient.
type roleServiceClient struct {
	getRole    *connect_go.Client[v1.GetRoleRequest, v1.GetRoleResponse]
	listRole   *connect_go.Client[v1.ListRoleRequest, v1.ListRoleResponse]
	createRole *connect_go.Client[v1.CreateRoleRequest, v1.CreateRoleResponse]
	updateRole *connect_go.Client[v1.UpdateRoleRequest, v1.UpdateRoleResponse]
}

// GetRole calls com.github.linzhengen.role.v1.RoleService.GetRole.
func (c *roleServiceClient) GetRole(ctx context.Context, req *connect_go.Request[v1.GetRoleRequest]) (*connect_go.Response[v1.GetRoleResponse], error) {
	return c.getRole.CallUnary(ctx, req)
}

// ListRole calls com.github.linzhengen.role.v1.RoleService.ListRole.
func (c *roleServiceClient) ListRole(ctx context.Context, req *connect_go.Request[v1.ListRoleRequest]) (*connect_go.Response[v1.ListRoleResponse], error) {
	return c.listRole.CallUnary(ctx, req)
}

// CreateRole calls com.github.linzhengen.role.v1.RoleService.CreateRole.
func (c *roleServiceClient) CreateRole(ctx context.Context, req *connect_go.Request[v1.CreateRoleRequest]) (*connect_go.Response[v1.CreateRoleResponse], error) {
	return c.createRole.CallUnary(ctx, req)
}

// UpdateRole calls com.github.linzhengen.role.v1.RoleService.UpdateRole.
func (c *roleServiceClient) UpdateRole(ctx context.Context, req *connect_go.Request[v1.UpdateRoleRequest]) (*connect_go.Response[v1.UpdateRoleResponse], error) {
	return c.updateRole.CallUnary(ctx, req)
}

// RoleServiceHandler is an implementation of the com.github.linzhengen.role.v1.RoleService service.
type RoleServiceHandler interface {
	GetRole(context.Context, *connect_go.Request[v1.GetRoleRequest]) (*connect_go.Response[v1.GetRoleResponse], error)
	ListRole(context.Context, *connect_go.Request[v1.ListRoleRequest]) (*connect_go.Response[v1.ListRoleResponse], error)
	CreateRole(context.Context, *connect_go.Request[v1.CreateRoleRequest]) (*connect_go.Response[v1.CreateRoleResponse], error)
	UpdateRole(context.Context, *connect_go.Request[v1.UpdateRoleRequest]) (*connect_go.Response[v1.UpdateRoleResponse], error)
}

// NewRoleServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRoleServiceHandler(svc RoleServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(RoleServiceGetRoleProcedure, connect_go.NewUnaryHandler(
		RoleServiceGetRoleProcedure,
		svc.GetRole,
		opts...,
	))
	mux.Handle(RoleServiceListRoleProcedure, connect_go.NewUnaryHandler(
		RoleServiceListRoleProcedure,
		svc.ListRole,
		opts...,
	))
	mux.Handle(RoleServiceCreateRoleProcedure, connect_go.NewUnaryHandler(
		RoleServiceCreateRoleProcedure,
		svc.CreateRole,
		opts...,
	))
	mux.Handle(RoleServiceUpdateRoleProcedure, connect_go.NewUnaryHandler(
		RoleServiceUpdateRoleProcedure,
		svc.UpdateRole,
		opts...,
	))
	return "/com.github.linzhengen.role.v1.RoleService/", mux
}

// UnimplementedRoleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRoleServiceHandler struct{}

func (UnimplementedRoleServiceHandler) GetRole(context.Context, *connect_go.Request[v1.GetRoleRequest]) (*connect_go.Response[v1.GetRoleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("com.github.linzhengen.role.v1.RoleService.GetRole is not implemented"))
}

func (UnimplementedRoleServiceHandler) ListRole(context.Context, *connect_go.Request[v1.ListRoleRequest]) (*connect_go.Response[v1.ListRoleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("com.github.linzhengen.role.v1.RoleService.ListRole is not implemented"))
}

func (UnimplementedRoleServiceHandler) CreateRole(context.Context, *connect_go.Request[v1.CreateRoleRequest]) (*connect_go.Response[v1.CreateRoleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("com.github.linzhengen.role.v1.RoleService.CreateRole is not implemented"))
}

func (UnimplementedRoleServiceHandler) UpdateRole(context.Context, *connect_go.Request[v1.UpdateRoleRequest]) (*connect_go.Response[v1.UpdateRoleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("com.github.linzhengen.role.v1.RoleService.UpdateRole is not implemented"))
}
